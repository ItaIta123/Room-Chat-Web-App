{"ast":null,"code":"import _toConsumableArray from\"/Users/itamarfayler/Computer Science/Live_Chat_App/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/itamarfayler/Computer Science/Live_Chat_App/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";// import queryString from \"query-string\"; // for retrieving data from url\nimport{io}from\"socket.io-client\";import{useLocation}from\"react-router-dom\";import InfoBar from\"../InfoBar/InfoBar\";import Input from\"../Input/Input\";import Messages from\"../Messages/Messages\";import TextContainer from\"../TextContainer/TextContainer\";import\"./Chat.css\";// console.log(\"test chat\");\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var socket;// helper function to get url parameters\nvar useQuery=function useQuery(){var _useLocation=useLocation(),search=_useLocation.search;return React.useMemo(function(){return new URLSearchParams(search);},[search]);};var Chat=function Chat(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),room=_useState4[0],setRoom=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),users=_useState6[0],setUsers=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),message=_useState8[0],setMessage=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),messagesArray=_useState10[0],setMessagesArray=_useState10[1];var ENDPOINT=\"https://react-chat-web-app-itamar.herokuapp.com/\";var query=useQuery();// sending message function\nvar send_message=function send_message(event){// console.log(\"send message function fired\")\n// prevent default so page will not get reload when user clicks the button\nevent.preventDefault();// send only if message is populated\nif(message){// console.log(\"we have a message in the front end\")\nsocket.emit(\"user message\",message,function(){return setMessage(\"\");});}};// getting data from url and emit 'disconnect' on component dismount\nuseEffect(function(){var name=query.get(\"name\");var room=query.get(\"room\");setName(name);setRoom(room);// firing up socket\nsocket=io(ENDPOINT);// emitting join event\nsocket.emit(\"join\",{name:name,room:room},function(){});// console.log(`Emmited join with name  ${name} and room ${room}`)\n// on dismounting of the Chat component (user leaves the page)\nreturn function(){socket.emit(\"disconnect\");socket.off();};},[ENDPOINT,query]);// listen to 'message' event from backend\nuseEffect(function(){// console.log(\"second useEffect\")\nsocket.on(\"message\",function(message){if(message.user===\"error\"){alert(message.text);}else{// console.log(\"detected message event inside front end\")\nsetMessagesArray([].concat(_toConsumableArray(messagesArray),[message]));// console.log(message, messagesArray);\n}});socket.on(\"roomData\",function(_ref){var users=_ref.users;setUsers(users);});},[messagesArray]);return/*#__PURE__*/_jsxs(\"div\",{className:\"outerContainer\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(InfoBar,{room:room}),/*#__PURE__*/_jsx(Messages,{messagesArray:messagesArray,name:name}),/*#__PURE__*/_jsx(Input,{message:message,setMessage:setMessage,send_message:send_message})]}),/*#__PURE__*/_jsx(TextContainer,{users:users,userName:name})]});};export default Chat;","map":{"version":3,"sources":["/Users/itamarfayler/Computer Science/Live_Chat_App/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","io","useLocation","InfoBar","Input","Messages","TextContainer","socket","useQuery","search","useMemo","URLSearchParams","Chat","name","setName","room","setRoom","users","setUsers","message","setMessage","messagesArray","setMessagesArray","ENDPOINT","query","send_message","event","preventDefault","emit","get","off","on","user","alert","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import queryString from \"query-string\"; // for retrieving data from url\nimport { io } from \"socket.io-client\";\nimport { useLocation } from \"react-router-dom\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport Input from \"../Input/Input\";\nimport Messages from \"../Messages/Messages\";\nimport TextContainer from \"../TextContainer/TextContainer\";\n\nimport \"./Chat.css\";\n\n// console.log(\"test chat\");\nlet socket;\n\n// helper function to get url parameters\nconst useQuery = () => {\n  const { search } = useLocation();\n\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n};\n\nconst Chat = () => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [users, setUsers] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messagesArray, setMessagesArray] = useState([]);\n\n  const ENDPOINT = \"https://react-chat-web-app-itamar.herokuapp.com/\";\n  let query = useQuery();\n\n  // sending message function\n  const send_message = (event) => {\n    // console.log(\"send message function fired\")\n    // prevent default so page will not get reload when user clicks the button\n    event.preventDefault();\n\n    // send only if message is populated\n    if (message) {\n      // console.log(\"we have a message in the front end\")\n      socket.emit(\"user message\", message, () => setMessage(\"\"));\n    }\n  };\n\n  // getting data from url and emit 'disconnect' on component dismount\n  useEffect(() => {\n    const name = query.get(\"name\");\n    const room = query.get(\"room\");\n\n    setName(name);\n    setRoom(room);\n\n    // firing up socket\n    socket = io(ENDPOINT);\n\n    // emitting join event\n    socket.emit(\"join\", { name, room }, () => {});\n    // console.log(`Emmited join with name  ${name} and room ${room}`)\n    // on dismounting of the Chat component (user leaves the page)\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, query]);\n\n  // listen to 'message' event from backend\n  useEffect(() => {\n    // console.log(\"second useEffect\")\n    socket.on(\"message\", (message) => {\n      if (message.user === \"error\") {\n        alert(message.text);\n      } else {\n        // console.log(\"detected message event inside front end\")\n        setMessagesArray([...messagesArray, message]);\n        // console.log(message, messagesArray);\n      }\n    });\n\n    socket.on(\"roomData\", ({ users }) => {\n      setUsers(users);\n    });\n  }, [messagesArray]);\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messagesArray={messagesArray} name={name} />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          send_message={send_message}\n        />\n      </div>\n      <TextContainer users={users} userName={name} />\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}
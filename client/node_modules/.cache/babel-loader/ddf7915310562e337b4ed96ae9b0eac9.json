{"ast":null,"code":"var _jsxFileName = \"/Users/itamarfayler/Computer Science/Live_Chat_App/client/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\"; // for retrieving data from url\n\nimport io from \"socket.io-client\";\nimport { useLocation } from \"react-router-dom\";\nimport InfoBar from '../InfoBar';\nimport \"./Chat.css\"; // console.log(\"test chat\");\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket; // helper function to get url parameters\n\nconst useQuery = () => {\n  _s();\n\n  const {\n    search\n  } = useLocation();\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n};\n\n_s(useQuery, \"I+9F+Vhfmc3otMLqUKFlYflxhf8=\", false, function () {\n  return [useLocation];\n});\n\nconst Chat = location => {\n  _s2();\n\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messagesArray, setMessagesArray] = useState([]);\n  const ENDPOINT = \"localhost:5001\";\n  let query = useQuery(); // sending message function\n\n  const send_message = event => {\n    // console.log(\"send message function fired\")\n    // prevent default so page will not get reload when user clicks the button\n    event.preventDefault(); // send only if message is populated\n\n    if (message) {\n      // console.log(\"we have a message in the front end\")\n      socket.emit(\"user message\", message, () => setMessage(\"\"));\n    }\n  }; // getting data from url and emit 'disconnect' on component dismount\n\n\n  useEffect(() => {\n    const name = query.get(\"name\");\n    const room = query.get(\"room\");\n    setName(name);\n    setRoom(room); // firing up socket\n\n    socket = io(ENDPOINT); // emitting join event\n\n    socket.emit(\"join\", {\n      name,\n      room\n    }, () => {}); // console.log(`Emmited join with name  ${name} and room ${room}`)\n    // on dismounting of the Chat component (user leaves the page)\n\n    return () => {\n      socket.emit(\"DISCONNECT\");\n      socket.off();\n    };\n  }, [ENDPOINT, query]); // listen to 'message' event from backend\n\n  useEffect(() => {\n    // console.log(\"second useEffect\")\n    socket.on(\"message\", message => {\n      // console.log(\"detected message event inside front end\")\n      setMessagesArray([...messagesArray, message]); // console.log(message, messagesArray);\n    });\n  }, [messagesArray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => {\n          setMessage(e.target.value);\n        },\n        onKeyPress: e => e.key === \"Enter\" ? send_message(e) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Chat, \"pLHW/2KJBlpFOcy8Bidyh9QOT3w=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/itamarfayler/Computer Science/Live_Chat_App/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","useLocation","InfoBar","socket","useQuery","search","useMemo","URLSearchParams","Chat","location","name","setName","room","setRoom","message","setMessage","messagesArray","setMessagesArray","ENDPOINT","query","send_message","event","preventDefault","emit","get","off","on","e","target","value","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\"; // for retrieving data from url\nimport io from \"socket.io-client\";\nimport { useLocation } from \"react-router-dom\";\nimport InfoBar from '../InfoBar'\nimport \"./Chat.css\";\n\n// console.log(\"test chat\");\nlet socket;\n\n// helper function to get url parameters\nconst useQuery = () => {\n  const { search } = useLocation();\n\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n};\n\nconst Chat = (location) => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messagesArray, setMessagesArray] = useState([]);\n\n  const ENDPOINT = \"localhost:5001\";\n  let query = useQuery();\n\n\n  // sending message function\n  const send_message = (event) => {\n    // console.log(\"send message function fired\")\n    // prevent default so page will not get reload when user clicks the button\n    event.preventDefault();\n\n    // send only if message is populated\n    if(message)\n    {\n      // console.log(\"we have a message in the front end\")\n      socket.emit(\"user message\", message, () => setMessage(\"\"));\n    }\n\n    \n\n  };\n\n  // getting data from url and emit 'disconnect' on component dismount\n  useEffect(() => {\n    const name = query.get(\"name\");\n    const room = query.get(\"room\");\n\n    setName(name);\n    setRoom(room);\n\n    // firing up socket\n    socket = io(ENDPOINT);\n\n    // emitting join event\n    socket.emit(\"join\", { name, room }, () => {});\n    // console.log(`Emmited join with name  ${name} and room ${room}`)\n    // on dismounting of the Chat component (user leaves the page)\n    return () => {\n      socket.emit(\"DISCONNECT\");\n      socket.off();\n    };\n  }, [ENDPOINT, query]);\n\n\n  // listen to 'message' event from backend\n  useEffect(() => {\n    // console.log(\"second useEffect\")\n    socket.on(\"message\", (message) => {\n      // console.log(\"detected message event inside front end\")\n      setMessagesArray([...messagesArray, message]);\n      // console.log(message, messagesArray);\n    })\n  }, [messagesArray])\n\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar />\n        <input\n          value={message}\n          onChange={(e) => {\n            setMessage(e.target.value);\n          }}\n          onKeyPress={(e) => (e.key === \"Enter\" ? send_message(e) : null)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}
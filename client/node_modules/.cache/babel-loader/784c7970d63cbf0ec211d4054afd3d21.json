{"ast":null,"code":"var _jsxFileName = \"/Users/itamarfayler/Computer Science/Live_Chat_App/client/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\"; // for retrieving data from url\n\nimport io from \"socket.io-client\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(\"test chat\");\nlet socket; // helper function to get url parameters\n\nconst useQuery = () => {\n  _s();\n\n  const {\n    search\n  } = useLocation();\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n};\n\n_s(useQuery, \"I+9F+Vhfmc3otMLqUKFlYflxhf8=\", false, function () {\n  return [useLocation];\n});\n\nconst Chat = location => {\n  _s2();\n\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messagesArray, setMessagesArray] = useState([]);\n  const ENDPOINT = \"localhost:5001\";\n  let query = useQuery(); // sending message function\n\n  const send_message = event => {\n    // prevent default so page will not get reload when user clicks the button\n    event.stopImmediatePropagation(); // send only if message is populated\n\n    if (message) {\n      socket.emit(\"user message\", message, () => setMessage(\"\"));\n    }\n  }; // getting data from url and emit 'disconnect' on component dismount\n\n\n  useEffect(() => {\n    const name = query.get(\"name\");\n    const room = query.get(\"room\");\n    setName(name);\n    setRoom(room); // firing up socket\n\n    socket = io(ENDPOINT); // emitting join event\n\n    socket.emit(\"join\", {\n      name,\n      room\n    }, () => {}); // on dismounting of the Chat component (user leaves the page)\n\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, query]); // listen to 'message' event from backend\n\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessagesArray([...messagesArray, message]);\n    });\n  }, [messagesArray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => {\n          setMessage(e.target.value);\n        },\n        onKeyPress: e => {\n          e.key === \"Enter\" ? send_message(e) : null;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Chat, \"pLHW/2KJBlpFOcy8Bidyh9QOT3w=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/itamarfayler/Computer Science/Live_Chat_App/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","useLocation","console","log","socket","useQuery","search","useMemo","URLSearchParams","Chat","location","name","setName","room","setRoom","message","setMessage","messagesArray","setMessagesArray","ENDPOINT","query","send_message","event","stopImmediatePropagation","emit","get","off","on","e","target","value","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\"; // for retrieving data from url\nimport io from \"socket.io-client\";\nimport { useLocation } from \"react-router-dom\";\n\nimport \"./Chat.css\";\n\nconsole.log(\"test chat\");\nlet socket;\n\n// helper function to get url parameters\nconst useQuery = () => {\n  const { search } = useLocation();\n\n  return React.useMemo(() => new URLSearchParams(search), [search]);\n};\n\nconst Chat = (location) => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messagesArray, setMessagesArray] = useState([]);\n\n  const ENDPOINT = \"localhost:5001\";\n  let query = useQuery();\n\n\n  // sending message function\n  const send_message = (event) => {\n    // prevent default so page will not get reload when user clicks the button\n    event.stopImmediatePropagation();\n\n    // send only if message is populated\n    if(message)\n    {\n      socket.emit(\"user message\", message, () => setMessage(\"\"));\n    }\n\n  }\n\n  // getting data from url and emit 'disconnect' on component dismount\n  useEffect(() => {\n    const name = query.get(\"name\");\n    const room = query.get(\"room\");\n\n    setName(name);\n    setRoom(room);\n\n    // firing up socket\n    socket = io(ENDPOINT);\n\n    // emitting join event\n    socket.emit(\"join\", { name, room }, () => {});\n\n    // on dismounting of the Chat component (user leaves the page)\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, query]);\n\n\n  // listen to 'message' event from backend\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessagesArray([...messagesArray, message]);\n    })\n  }, [messagesArray])\n\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <input\n          value={message}\n          onChange={(e) => {\n            setMessage(e.target.value);\n          }}\n          onKeyPress={(e) => {e.key === \"Enter\" ? send_message(e) : null}}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}